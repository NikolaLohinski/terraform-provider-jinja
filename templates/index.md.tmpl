{{- /*
    The following magic is to use the codefile function to load a plain markdown file.
    tfplugindocs has only the codefile function to work with and it wraps the content of 
    the file with "```" as if it was code. The following helper loops over the contents of
    the file while remove the first and last lines that contain "```" with pure native go
    template logic. It also adds a leading "#" to every line starting with "#", in order
    to nest markdown sections one level more
*/ -}}
{{- define "file" }}
{{- $contents := split (codefile "" .) "\n" }}
{{ range $index, $line := $contents }}
{{- if gt $index 0 }}
{{- if lt $index (len (slice (printf "%*s" (len $contents) "") 1)) }}
{{- if eq (printf "%.1s" $line) "#" }}#{{ $line }}{{ else }}{{ $line }}{{ end }}
{{ end }}{{ end }}{{ end }}{{ end -}}
---
page_title: "Jinja provider"
subcategory: ""
description: |-
 The Jinja provider is used render Jinja templates within terraform context. 
---

# Jinja provider

The "jinja" provider makes it possible to use [Jinja](https://jinja.palletsprojects.com) templating within Terraform context. This is a *logical provider*, which means that it works entirely within Terraform's logic, and doesn't interact with any other services.

## Example

{{ tffile "examples/provider.tf" }}

{{ .SchemaMarkdown | trimspace }}

## Important considerations

The Jinja engine used under the hood is based on [the `gonja` Golang library](https://github.com/nikolalohinski/gonja/v2) and aims to be "mostly" compliant with the Jinja API. 

Finally, the JSON schema validation engine is based on [the `jsonschema` Golang library](https://github.com/santhosh-tekuri/jsonschema).

The following sections describe the features available in the engine.

{{ template "file" "vendor/github.com/nikolalohinski/gonja/v2/docs/control_structures.md" }}

{{ template "file" "vendor/github.com/nikolalohinski/gonja/v2/docs/global_functions.md" }}

{{ template "file" "vendor/github.com/nikolalohinski/gonja/v2/docs/filters.md" }}

### The `add`, `append` and `insert` filters

The `insert` filter is meant to add a key value pair to a dict. It expects a key and value to operate.

The `append` filter adds an item to a list. It expects one value to work.

The `add` filter is just the combination of both with type reflection to decide what to do.

```
{%- set object = {"existing": "value", "overridden": 123} | insert("other", true) | add("overridden", "new") -%}
{%- set array = ["one"] | add("two") | append("three") -%}
{{ "{{" }} object | tojson {{ "}}" }}
{{ "{{" }} array | tojson {{ "}}" }}
```
Will render into:
```
{"existing":"value","other":true,"overridden":"new"}
["one","two","three"]
```

### The `bool` filter

The `bool` filter is meant to cast a string, an int, a bool or `nil` to a boolean value. _Truthful_ values are:
* Any string once lowercased such as `"on"`, `"yes"` `"1"` or `"true"`
* `1` as an integer or `1.0` as a float
* A `True` boolean

_False_ values are:
* Any string once lowercased such as `"off"`, `"no"` `"0"` or `"false"` 
* An empty string
* `0` as an integer or `0.0` as a float
* A `False` boolean
* A `nil` or `None` value

Any other type passed will cause the `bool` filter to fail.


### The `concat` filter

The `concat` filter is meant to concatenate lists together and can take any number of lists to append together.

```
{%- set array = ["one"] | concat(["two"],["three"]) -%}
{{ "{{" }} array | tojson {{ "}}" }}
```
Will render into:
```
["one","two","three"]
```

### The `fail` filter

The `fail` filter is meant to error out explicitly in a given place of the template.

```
{{ "{{" }} "error message to output" | fail {{ "}}" }}
```

### The `file` filter

The `file` filter is meant to load a local file into a variable. It works with both absolute and relative (to the place it's called from) paths. The `file` filter does not process the file as a template but simply loads the contents of it.

```
{% set content = "some/path" | file %}
{{ "{{" }} content {{ "}}" }}
```

### The `fileset` filter

The `fileset` filter is a filesystem filter meant to be used with the `include` statement to dynamically include files.
It supports glob patterns (using `*`) and double glob patterns (using `**`) in paths, and operates relatively to the
folder that contains the file being rendered.

```
{% for path in "folder/*" | fileset %}
{% include path %}
{% endfor %}
```


### The `fromjson` filter

The `fromjson` filter is meant to parse a JSON string into a useable object.

```
{%- set object = "{ \"nested\": { \"field\": \"value\" } }" | fromjson -%}
{{ "{{" }} object.nested.field {{ "}}" }}
```
Will render into:
```
value
```

### The `fromtoml` filter

The `fromtoml` filter is meant to parse a TOML string into a useable object.

```
{%- set object = "[nested]\nfield = \"value\"" | fromtoml -%}
{{ "{{" }} object.nested.field {{ "}}" }}
```
Will render into:
```
value
```

### The `fromyaml` filter

The `fromyaml` filter is meant to parse a YAML string into a useable object.

```
{%- set object = "nested:\n  field: value\n" | fromyaml -%}
{{ "{{" }} object.nested.field {{ "}}" }}
```
Will render into:
```
value
```

### The `get` filter

The `get` filter helps getting an item in a map with a dynamic key:

```
{% set tac = "key" %}
{{ "{{" }} tic | get(tac) {{ "}}" }}
```
With the following YAML context:
```
tic:
  key: toe
```
Will render into:
```
toe
```

The filter has the following keyword attributes:

- `strict`: a boolean to fail if the key is missing from the map. Defaults to `False` ;
- `default`: any value to pass as default if the key is not found. This takes precedence over the `strict` attribute if defined. Defaults to nil value ;

### The `ifelse` filter

The `ifelse` filter is meant to perform ternary conditions as follows:

```
true is {{ "{{" }} "foo" in "foo bar" | ifelse("yes", "no") {{ "}}"}}
false is {{ "{{" }} "yolo" in "foo bar" | ifelse("yes", "no") {{ "}}" }}
```
Which will render into:
```
true is yes
false is no
```

### The `keys` filter

The `keys` filter is meant to get the keys of a map as a list:

```
{{ "{{" }} letters | keys | sort | join(" > ") {{ "}}" }}
```
With the following YAML context:
```
letters:
  a: hey
  b: bee
  c: see
```
Will render into:
```
a > b > c
```

Note that the order of keys is not guaranteed as there is no ordering in Golang maps.

### The `match` filter

Expects a string holding a regular expression to be passed as an argument to match against the input. Returns `true` if the input matches the expression and `false` otherwise. For example:

```
{{ "{{" }} "123 is a number" | match("^[0-9]+") {{ "}}" }}
```

will render as:

```
True
```


### The `split` filter

The `split` filter is meant to split a string into a list of strings using a given delimiter.

```
{%- set array = "one/two/three" | split("/") -%}
{{ "{{" }} array | tojson {{ "}}" }}
```
Will render into:
```
["one","two","three"]
```


### The `totoml` filter

The `totoml` filter is meant to render a given object as TOML.

```
{%- set object = "{ \"nested\": { \"field\": \"value\" } }" | fromjson -%}
{{ "{{" }} object | totoml {{ "}}" }}
```
Will render into:
```
[nested]
field = "value"
```

### The `toyaml` filter


The `toyaml` filter is meant to render a given object as YAML. It takes an optional argument called `indent` to
specify the indentation to apply to the result, which defaults to `2` spaces.

```
{%- set object = "{ \"nested\": { \"field\": \"value\" } }" | fromjson -%}
{{ "{{" }} object | toyaml {{ "}}" }}
```
Will render into:
```
nested:
  field: value
```

### The `try` filter

The `try` filter is meant to gracefully evaluate an expression. It returns an `undefined` value if the passed expression is undefined or throws an error. Otherwise, it returns the value passed in the context of the pipeline.

```
{%- if (empty.missing | try) is undefined -%}
	Now you see {{ "{{" }} value | try {{ "}}" }}!
{%- endif -%}
```
With the following YAML context and `strict_undefined` set to `true`:
```
empty: {}
value: me
```
Will render into:
```
Now you see me!
```

This is useful when `strict_undefined = true` is set but you need to handle a missing key without throwing errors in a given template ;

### The `values` filter

The `values` filter is meant to get the values of a map as a list:

```
{{ "{{" }} numbers | values | sort | join(" > ") {{ "}}" }}
```
With the following YAML context:
```
numbers:
  first: 1
  second: 2
  third: 3
```
Will render into:
```
1 > 2 > 3
```

{{ template "file" "vendor/github.com/nikolalohinski/gonja/v2/docs/tests.md" }}

### The `empty` test
Check if the input is empty. Works on strings, lists and dictionaries.
