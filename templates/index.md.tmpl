---
page_title: "Jinja provider"
subcategory: ""
description: |-
 The Jinja provider is used render Jinja templates within terraform context. 
---

# Jinja provider

The "jinja" provider makes it possible to use [Jinja](https://jinja.palletsprojects.com) templating within Terraform context. This is a *logical provider*, which means that it works entirely within Terraform's logic, and doesn't interact with any other services.

## Example

{{ tffile "examples/provider.tf" }}

{{ .SchemaMarkdown | trimspace }}

## Important considerations

The Jinja engine used under the hood is based on [the `gonja` Golang library](https://github.com/noirbizarre/gonja) and aims to be "mostly" compliant with the Jinja API. 

The [official Jinja API documentation](https://jinja.palletsprojects.com/en/3.0.x) and especially the [list of builtin filters](https://jinja.palletsprojects.com/en/3.0.x/templates/#list-of-builtin-filters) can be used as reference for using this provider. However, should the need for the exact implementation arise, one can easily refer to the `gonja` source code:

* for filters: https://github.com/noirbizarre/gonja/blob/master/builtins/filters.go
* for globals: https://github.com/noirbizarre/gonja/blob/master/builtins/globals.go
* for statements: https://github.com/noirbizarre/gonja/tree/master/builtins/statements

Finally, the JSON schema validation engine is based on [the `jsonschema` Golang library](https://github.com/santhosh-tekuri/jsonschema).

The following sections describe additional features that have been added to improve the developer experience.

### The `ifelse` filter

The `ifelse` filter is meant to perform ternary conditions as follows:

```
true is {{"{{"}} "foo" in "foo bar" | ifelse("yes", "no") {{"}}"}}
false is {{"{{"}} "yolo" in "foo bar" | ifelse("yes", "no") {{"}}"}}
```
Which will render into:
```
true is yes
false is no
```

### The `get` filter

The `get` filter helps getting an item in a map with a dynamic key:

```
{{"{%"}} set tac = "key" {{"%}"}}
{{"{{"}} tic | get(tac) {{"}}"}}
```
With the following YAML context:
```
tic:
  key: toe
```
Will render into:
```
toe
```

### The `values` filter

The `values` filter is meant to get the values of a map as a list:

```
{{"{{"}} numbers | values | sort | join(" > ") {{"}}"}}
```
With the following YAML context:
```
numbers:
  first: 1
  second: 2
  third: 3
```
Will render into:
```
1 > 2 > 3
```

Note that the order of values is not guaranteed as there is no ordering in Golang maps.

### The `keys` filter

The `keys` filter is meant to get the keys of a map as a list:

```
{{"{{"}} letters | keys | sort | join(" > ") {{"}}"}}
```
With the following YAML context:
```
letters:
  a: hey
  b: bee
  c: see
```
Will render into:
```
a > b > c
```

Note that the order of keys is not guaranteed as there is no ordering in Golang maps.

### The `try` filter

The `try` filter is meant to gracefully evaluate an expression. It returns an `undefined` value if the passed expression is undefined or throws an error. Otherwise, it returns the value passed in the context of the pipeline.

```
{%- if (empty.missing | try) is undefined -%}
	Now you see {{ "{{" }} value | try {{ "}}" }}!
{%- endif -%}
```
With the following YAML context and `strict_undefined` set to `true`:
```
empty: {}
value: me
```
Will render into:
```
Now you see me!
```

Important notes:
* This is useful when `strict_undefined = true` is set but you need to handle a missing key without throwing errors in a given template ;
* The `try` filter behaves poorly if used like a function (as such `try(...)`). This is due to a limitation in the underlying Jinja engine. Therefore, it is asked of the user to prefer using the pipeline syntax with `|` to leverage this filter.
